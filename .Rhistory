install.packages("nycflights13")
library(nycflights13)
data(weather)
library(dplyr)
data("weather")
dim(weather)
library(shiny)
runExample("01_hello")
?runExample
library(shiny)
runExample("01_hello")
library(nycflights13)
?require
data("airlines")
head(airlines)
data("airports")
head airports
head(airports)
head(flights)
data("flights")
head(flights)
data(planes)
head(planes)
data("weather")
head(weather)
table(weather$origin)
summary(flights$dep_delay)
quantile(flights$dep_delay, c(.5, .6, .7, .8, .9))
?quantile
quantile(flights$dep_delay, probs= seq(0.5, 1, .05), na.rm=TRUE)
quantile(flights$arr_delay, probs= seq(0.5, 1, .05), na.rm=TRUE)
hist(flights$dep_delay)
quantile(flights$dep_delay, probs= seq(0, 1, .05), na.rm=TRUE)
airlines
head(airports)
table(planes$manufacturer)
?table
table(planes$manufacturer, exclude=NULL)
summary(planes$year)
table(planes$engines)
table(planes$seats)
quantile(planes$seats, probs= seq(0, 1, .05), na.rm=TRUE)
View(flights)
table(flights$carrier)
View(flights)
library(glmnet)
set.seed(1010)
n=1000;p=100
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta=rnorm(nzc)
fx= x[,seq(nzc)] %*% beta
eps=rnorm(n)*5
y=drop(fx+eps)
px=exp(fx)
px=px/(1+px)
ly=rbinom(n=length(px),prob=px,size=1)
set.seed(1011)
cvob1=cv.glmnet(x,y)
plot(cvob1)
coef(cvob1)
predict(cvob1,newx=x[1:5,], s="lambda.min")
title("Gaussian Family",line=2.5)
save("cvob1")
save(file = "cvob1")
save(cvob1, file="cvob1.rda")
?impute
table(flights$carrier)
head(flights)
head(planes)
table(planes$manufacturer)
table(planes$engines)
summary(weather$precip)
summary(weather$temp)
summary(weather$visib)
library(dplyr)
weathwer
weather
summary(weather$wind_speed)
summary(weather$wind_gust)
sum(is.na(flights$dep_delay))
dim(weather)
dim(flights)
flights <- filter(, is.na(dep_delay) == FALSE)
flights <- filter(flights, is.na(dep_delay) == FALSE)
data(flights)
dim(flights)
sum(is.na(flights$dep_time))
sum(is.na(flights$time_hour))
install.packages("markdown")
library(markdown)
install.packages("rmarkdown")
library(rmarkdown)
update.packages()
shiny::runApp('JHU_DataScience/DevelopingDataProducts/NYCFlightDelay')
runApp('JHU_DataScience/DevelopingDataProducts/NYCFlightDelay')
shiny::runApp('JHU_DataScience/DevelopingDataProducts/NYCFlightDelay')
load("~/StormProject/Nexrad_Hail_2014.rda")
head(raw)
load("C:/Users/David/Documents/StormProject/merged_SE_2015.rda")
table(merged_SE$YEAR)
head(merged_SE)
runApp('JHU_DataScience/DevelopingDataProducts/NYCFlightDelay')
runApp('JHU_DataScience/DevelopingDataProducts/NYCFlightDelay')
runApp('JHU_DataScience/DevelopingDataProducts/NYCFlightDelay')
runApp('JHU_DataScience/DevelopingDataProducts/NYCFlightDelay')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='davidbeede', token='FCA18E9073536520856BCF78F08E29B2', secret='FGI2Chk98CEfnpZiT9hpyva6PxYjNUjMSe6LDyR2')
rsconnect::deployApp('~/JHU_DataScience/DevelopingDataProducts\NYCFlightDelay')
rsconnect::deployApp('~/JHU_DataScience/DevelopingDataProducts/NYCFlightDelay')
load("C:/Users/David/Documents/StormProject/SWDI_SE_ACS.rda")
head(SWDI_SE_ACS)
summary(SWDI_SE_ACS$maxanydamage)
summary(SWDI_SE_ACS$minanydamage)
install.packages("installr")
library(installr)
updateR()
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
mean(linkedin + facebook)
mean(linkedin + facebook, trim=0.2)
z <- linkedin + facebook
z
z[2:6]
mean(z[2:6])
sort(z)
z <- sort(z)
z
mean(z[2:6])
source('~/JHU_DataScience/RProgramming/InstallRUpdate.R', echo=TRUE)
install.packages("rmarkdown")
library(rmarkdown)
library(knitr)
>nrow()
nrow()
?nrow
?dim
?subset
?rename
?replicate
library(cmcsu)
library(cmscu)
?replicate
source('~/JHU_DataScience/CapstoneProject/cmscu_article_example.R', echo=TRUE)
counts
dict$finalize
?dict$finalize
?dict$store
dict$finalize
library(cmscu)
source('~/JHU_DataScience/CapstoneProject/cmscu_article_example.R', echo=TRUE)
?replicate
dict$store(test2)
dict$unique_entries
dict$entries
histogram(2)
dict$histogram(2)
dict
dict$test
dict$string(test2)
dict$query(test2)
dict[[1]]
dict$test2[[1]]
dict$counts
dict$finalize
dict$query("not present")
dict$store(test)
rm dict
source('~/JHU_DataScience/CapstoneProject/cmscu_article_example.R', echo=TRUE)
counts
dict$store(test2)
counts <- dict$query(test)
counts
dict$show
dict$query("this is")
dict$store(test2)
dict$query("this is")
dict$store(test)
dict$store(test)[1]
dict$store(test)[[1]
]
dict[[1]]
dict[1][[1]]
?;
?install_github
?devtools::install_github
?uninstall
devtools::install_github("/jasonkdavis/r-cmscu")
devtools::install_github("/jasonkdavis/r-cmscu/pulls")
shiny::runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
devtools::install_github("jasonkdavis/r-cmscu", subdir = "cmscu")
runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
options(rsconnect.max.bundle.size=1000000000)
runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
rsconnect::showLogs()
?rsconnect::showLogs
runApp('JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor')
setwd("~/JHU_DataScience/CapstoneProject/WordPredictor/WordPredictor")
runApp()
runApp()
